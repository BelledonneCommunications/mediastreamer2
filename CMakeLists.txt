############################################################################
# CMakeLists.txt
# Copyright (C) 2014  Belledonne Communications, Grenoble France
#
############################################################################
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 2
# of the License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
#
############################################################################

cmake_minimum_required(VERSION 3.0)
project(mediastreamer2 VERSION 2.16.1 LANGUAGES C CXX)


set(MEDIASTREAMER_MAJOR_VERSION ${PROJECT_VERSION_MAJOR})
set(MEDIASTREAMER_MINOR_VERSION ${PROJECT_VERSION_MINOR})
set(MEDIASTREAMER_MICRO_VERSION ${PROJECT_VERSION_PATCH})
set(MEDIASTREAMER_VERSION ${PROJECT_VERSION})
set(MEDIASTREAMER_SO_VERSION "10") # incremented after Mediastreamer 2.15.1. Do not increment before next release

string(REGEX MATCH "^(arm*|aarch64)" FIXED_POINT_PROCESSOR "${CMAKE_SYSTEM_PROCESSOR}")
if(FIXED_POINT_PROCESSOR)
	set(ENABLE_FIXED_POINT_DEFAULT_VALUE YES)
else()
	set(ENABLE_FIXED_POINT_DEFAULT_VALUE NO)
endif()
if(IOS)
	set(ENABLE_MACSND_DEFAULT_VALUE NO)
	set(ENABLE_MACAQSND_DEFAULT_VALUE YES)
else()
	set(ENABLE_MACSND_DEFAULT_VALUE YES)
	set(ENABLE_MACAQSND_DEFAULT_VALUE NO)
endif()
set(ENABLE_GLX_DEFAULT_VALUE NO)
set(ENABLE_X11_DEFAULT_VALUE NO)
if(UNIX)
	if(NOT APPLE)
		set(ENABLE_GLX_DEFAULT_VALUE YES)
		set(ENABLE_X11_DEFAULT_VALUE YES)
	endif()
endif()
if(UNIX AND NOT APPLE)
	set(LINUX_OR_BSD 1)
endif()

include(CMakeDependentOption)

option(ENABLE_SHARED "Build shared library." YES)
option(ENABLE_STATIC "Build static library." YES)
option(ENABLE_DEBUG_LOGS "Enable the display of traces showing the execution of the library." NO)
option(ENABLE_DOC "Enable documentation generation with Doxygen." YES)
option(ENABLE_FIXED_POINT "Turn on fixed point computations." ${ENABLE_FIXED_POINT_DEFAULT_VALUE})
option(ENABLE_NON_FREE_CODECS "Allow inclusion of non-free codecs in the build." NO)
option(ENABLE_PCAP "Enable PCAP support." NO)
option(ENABLE_STRICT "Build with strict compile options." YES)
option(ENABLE_RELATIVE_PREFIX "Find resources relatively to the installation directory." NO)
option(ENABLE_TOOLS "Turn on or off compilation of tools." YES)
option(ENABLE_UNIT_TESTS "Enable compilation of unit tests." YES)

option(ENABLE_SRTP "Build with the SRTP transport support." YES)
cmake_dependent_option(ENABLE_ZRTP "Build with ZRTP support." YES "ENABLE_SRTP" NO)

option(ENABLE_SOUND "Can be used to turn off all possible sound backends." YES)
cmake_dependent_option(ENABLE_ALSA "Enable ALSA support." YES "ENABLE_SOUND;LINUX_OR_BSD" NO)
cmake_dependent_option(ENABLE_ANDROIDSND "Enable Android sound support." NO "ENABLE_SOUND;ANDROID" NO)
cmake_dependent_option(ENABLE_ARTSC "Enable artsc (KDE<4) sound input/output." NO "ENABLE_SOUND;LINUX_OR_BSD" NO)
cmake_dependent_option(ENABLE_MACSND "Enable MAC OS X Audio Units sound support." ${ENABLE_MACSND_DEFAULT_VALUE} "ENABLE_SOUND;APPLE" NO)
cmake_dependent_option(ENABLE_MACAQSND "Enable native MAC OS X Audio Queue sound support." ${ENABLE_MACAQSND_DEFAULT_VALUE} "ENABLE_SOUND;APPLE" NO)
cmake_dependent_option(ENABLE_QSA "Enable QSA (QNX Sound Architecture) support." NO "ENABLE_SOUND" NO)
# OSS is mostly deprecated in 2016, so it should not be built by default (it won't work anyway). Let user defines it
# itself only if he REALLY needs it.
cmake_dependent_option(ENABLE_OSS "Enable OSS support." NO "ENABLE_SOUND;LINUX_OR_BSD" NO)
cmake_dependent_option(ENABLE_PORTAUDIO "Enable portaudio native support." NO "ENABLE_SOUND" NO)
cmake_dependent_option(ENABLE_PULSEAUDIO "Enable pulseaudio support." YES "ENABLE_SOUND" NO)
option(ENABLE_G726 "Build mediastreamer2 with the G726 codec." NO)
option(ENABLE_GSM "Build mediastreamer2 with the GSM codec." YES)
option(ENABLE_BV16 "Build mediastreamer2 with the BV16 codec." YES)
option(ENABLE_OPUS "Build mediastreamer2 with the OPUS codec." YES)
option(ENABLE_SPEEX_CODEC "Build mediastreamer2 with the SPEEX codec." YES)
option(ENABLE_SPEEX_DSP "Build mediastreamer2 with the SPEEX DSP support." YES)
option(ENABLE_G729 "Build mediastreamer2 with the G729 codec." YES)
option(ENABLE_G729B_CNG "Build mediastreamer2 with G729 annex B cng." NO)
cmake_dependent_option(ENABLE_RESAMPLE "Build mediastreamer2 with the resampling capability." YES "ENABLE_SPEEX_DSP" NO)

option(ENABLE_VIDEO "Build mediastreamer2 with video support." YES)
cmake_dependent_option(ENABLE_FFMPEG "Build mediastreamer2 with ffmpeg video support." YES "ENABLE_VIDEO" NO)
cmake_dependent_option(ENABLE_GL "Enable generic OpenGL rendering support." YES "ENABLE_VIDEO" NO)
cmake_dependent_option(ENABLE_GLX "Enable X11+OpenGL rendering support (requires glx and glew)." ${ENABLE_GLX_DEFAULT_VALUE} "ENABLE_VIDEO;UNIX" NO)
cmake_dependent_option(ENABLE_SDL "Enable SDL support." NO "ENABLE_FFMPEG" NO)
cmake_dependent_option(ENABLE_V4L "Enable Video4Linux support." YES "ENABLE_VIDEO;LINUX_OR_BSD" NO)
cmake_dependent_option(ENABLE_X11 "Enable X11 support." ${ENABLE_X11_DEFAULT_VALUE} "ENABLE_FFMPEG;UNIX" NO)
cmake_dependent_option(ENABLE_XV "Enable XV support." ${ENABLE_X11_DEFAULT_VALUE} "ENABLE_FFMPEG;UNIX" NO)
cmake_dependent_option(ENABLE_THEORA "Enable theora video codec support." YES "ENABLE_VIDEO" NO)
cmake_dependent_option(ENABLE_VPX "Build mediastreamer2 with VPX codec." YES "ENABLE_VIDEO" NO)
option(ENABLE_MKV "Enable support of MKV files reading and writing." YES)
cmake_dependent_option(ENABLE_QNX "Build medistreamer2 with BB10 filters." NO "ENABLE_VIDEO" NO)
cmake_dependent_option(ENABLE_VT_H264 "Build mediastreamer2 with H264 encoder/decoder based on VirtualToolbox (Apple only)" YES "ENABLE_VIDEO" NO)
cmake_dependent_option(ENABLE_VT_H265 "Build mediastreamer2 with H265 encoder/decoder based on VirtualToolbox (Apple only)" YES "ENABLE_VIDEO" NO)
option(ENABLE_JPEG "Enable JPEG support" YES)
option(ENABLE_QRCODE "Enable QRCode support" YES)

set(CMAKE_CXX_STANDARD 11)
set(CMAKE_CXX_EXTENSIONS NO)

list(APPEND CMAKE_MODULE_PATH "${CMAKE_CURRENT_SOURCE_DIR}/cmake")

include(CheckIncludeFile)
include(CheckLibraryExists)
include(CMakePushCheckState)
include(GNUInstallDirs)

if(NOT CMAKE_INSTALL_RPATH AND CMAKE_INSTALL_PREFIX)
	set(CMAKE_INSTALL_RPATH ${CMAKE_INSTALL_FULL_LIBDIR})
	message(STATUS "Setting install rpath to ${CMAKE_INSTALL_RPATH}")
endif()

if(MSVC AND MSVC_VERSION LESS 1800)
	set(MSVC_INCLUDE_DIR "${CMAKE_CURRENT_SOURCE_DIR}/include/MSVC")
	list(APPEND CMAKE_REQUIRED_INCLUDES "${MSVC_INCLUDE_DIR}")
endif()

check_include_file(sys/shm.h HAVE_SYS_SHM_H)
check_include_file(alloca.h HAVE_ALLOCA_H)
if(ENABLE_OSS)
	check_include_file(soundcard.h HAVE_SOUNDCARD_H)
	check_include_file(sys/soundcard.h HAVE_SYS_SOUNDCARD_H)
	check_include_file(machine/soundcard.h HAVE_MACHINE_SOUNDCARD_H)
	check_include_file(sys/audio.h HAVE_SYS_AUDIO_H)
	if(NOT (HAVE_SOUNDCARD_H OR HAVE_SYS_SOUNDCARD_H OR HAVE_MACHINE_SOUNDCARD_H OR HAVE_SYS_AUDIO_H))
		set(ENABLE_OSS OFF CACHE BOOL "Enable OSS support." FORCE)
	endif()
endif()

check_library_exists("dl" "dlopen" "" HAVE_DLOPEN)

include(TestBigEndian)
test_big_endian(WORDS_BIGENDIAN)

if(LINPHONE_BUILDER_GROUP_EXTERNAL_SOURCE_PATH_BUILDERS)
	include("${EP_ortp_CONFIG_DIR}/ORTPConfig.cmake")
else()
	find_package(ORTP REQUIRED)
endif()


if(ENABLE_PCAP)
	find_package(PCAP QUIET)
endif()

if(ENABLE_SRTP)
	find_package(SRTP)
	if(NOT SRTP_FOUND)
		message(WARNING "Could not find SRTP library, Mediastreamer2 will be compiled without SRTP support.")
		set(ENABLE_SRTP OFF CACHE BOOL "Build with the SRTP transport support." FORCE)
	endif()
endif()
if(ENABLE_ZRTP)
	if(LINPHONE_BUILDER_GROUP_EXTERNAL_SOURCE_PATH_BUILDERS)
		include("${EP_bzrtp_CONFIG_DIR}/BZRTPConfig.cmake")
	else()
		find_package(BZRTP)
	endif()
	if(NOT BZRTP_FOUND)
		message(WARNING "Could not find bzrtp library, mediastreamer2 will be compiled without ZRTP support.")
		set(ENABLE_ZRTP OFF CACHE BOOL "Build mediastreamer2 with ZRTP support." FORCE)
	endif()
endif()
if(ENABLE_G726)
	find_package(SpanDSP REQUIRED)
endif()
if(ENABLE_GSM)
	find_package(GSM)
	if(NOT GSM_FOUND)
		message(WARNING "Could not find GSM library, mediastreamer2 will be compiled without the GSM codec.")
		set(ENABLE_GSM OFF CACHE BOOL "Build mediastreamer2 with the GSM codec." FORCE)
	endif()
endif()
if(ENABLE_BV16)
	find_package(BV16)
	if(NOT BV16_FOUND)
		message(WARNING "Could not find BV16 library, mediastreamer2 will be compiled without the BV16 codec.")
		set(ENABLE_BV16 OFF CACHE BOOL "Build mediastreamer2 with the BV16 codec." FORCE)
	endif()
endif()
if(ENABLE_OPUS)
	find_package(Opus)
	if(NOT OPUS_FOUND)
		message(WARNING "Could not find opus library, mediastreamer2 will be compiled without the OPUS codec.")
		set(ENABLE_OPUS OFF CACHE BOOL "Build mediastreamer2 with the OPUS codec." FORCE)
	endif()
endif()
if(ENABLE_SPEEX_CODEC)
	find_package(Speex)
	if(NOT SPEEX_FOUND)
		message(WARNING "Could not find speex library, mediastreamer2 will be compiled without the SPEEX codec.")
		set(ENABLE_SPEEX_CODEC OFF CACHE BOOL "Build mediastreamer2 with the SPEEX codec." FORCE)
	endif()
endif()
if(ENABLE_SPEEX_DSP)
	find_package(SpeexDsp REQUIRED)
endif()
if(ENABLE_ALSA)
	find_package(ALSA)
	if(NOT ALSA_FOUND)
		set(ENABLE_ALSA OFF CACHE BOOL "Enable ALSA support." FORCE)
	endif()
endif()
if(ENABLE_ARTSC)
	find_package(Arts REQUIRED)
endif()
if(ENABLE_PORTAUDIO)
	find_package(PortAudio REQUIRED)
endif()
if(ENABLE_PULSEAUDIO)
	find_package(PulseAudio)
	if(NOT PULSEAUDIO_FOUND)
		set(ENABLE_PULSEAUDIO OFF CACHE BOOL "Enable pulseaudio support." FORCE)
	endif()
endif()
if(ENABLE_QSA)
	find_package(QSA REQUIRED)
	find_package(QnxAudioManager REQUIRED)
endif()
if(ENABLE_VIDEO)
	add_definitions(-DVIDEO_ENABLED)
endif()
if(ENABLE_FFMPEG)
	find_package(FFMpeg REQUIRED)
else()
	add_definitions(-DNO_FFMPEG)
endif()
if(ENABLE_V4L)
	find_package(V4L)
	if(NOT V4L_FOUND)
		message(FATAL_ERROR "Missing V4L. It is highly recommended to build with libv4l2 headers and library. Many camera will won't work or will crash your application if libv4l2 is not installed. If you know what you are doing, you can use -DENABLE_V4L=0 to disable this check.")
	endif()
endif()
if(ENABLE_X11)
	find_package(X11)
	if(NOT X11_FOUND)
		set(ENABLE_X11 OFF CACHE BOOL "Enable X11 support." FORCE)
	endif()
endif()
if(ENABLE_XV)
	find_package(Xv)
	if(XV_FOUND)
		set(HAVE_XV 1)
	else()
		set(ENABLE_XV OFF CACHE BOOL "Enable XV support." FORCE)
	endif()
endif()
if(ENABLE_GL)
	if(WIN32)
		find_package(QtAngle)
		if(QTANGLE_FOUND)
			set(HAVE_GL 1)
		else()
			set(ENABLE_GL OFF CACHE BOOL "Enable generic OpenGL rendering support." FORCE)
		endif()
	else()
		find_package(OpenGL)
		if(OPENGL_FOUND)
			set(HAVE_GL 1)
		else()
			set(ENABLE_GL OFF CACHE BOOL "Enable generic OpenGL rendering support." FORCE)
		endif()
	endif()
endif()
if(ENABLE_GLX)
	find_package(GLX)
	if(GLX_FOUND)
		set(HAVE_GLX 1)
	else()
		set(ENABLE_GLX OFF CACHE BOOL "Enable X11+OpenGL rendering support (requires glx and glew)." FORCE)
	endif()
endif()
# TODO: Handle SDL option
if(ENABLE_THEORA)
	find_package(Theora)
	if(NOT THEORA_FOUND)
		message(WARNING "Could not find theora library, mediastreamer2 will be compiled without theora support.")
		set(ENABLE_THEORA OFF CACHE BOOL "Enable theora video codec support." FORCE)
	endif()
endif()
if(ENABLE_VPX)
	find_package(VPX)
	if(VPX_FOUND)
		set(HAVE_VPX 1)
	else()
		set(ENABLE_VPX OFF CACHE BOOL "Build mediastreamer2 with VPX codec." FORCE)
	endif()
endif()
if(ENABLE_MKV)
	find_package(BcMatroska2 QUIET)
	if(NOT BCMATROSKA2_FOUND)
		message(WARNING "Could not find BcMatroska2 library, mediastreamer2 will be compiled without MKV support.")
		set(ENABLE_MKV OFF CACHE BOOL "Enable support of MKV files reading and writing." FORCE)
	endif()
endif()

if(ENABLE_QNX)
	find_package(Screen)
	if(NOT SCREEN_FOUND)
		message(FATAL_ERROR "SCREEN NOT FOUND")
	endif()
	find_package(CamApi)
	if(NOT CAMAPI_FOUND)
		message(FATAL_ERROR "CAMAPI NOT FOUND")
	endif()
endif()

if(ENABLE_SOUND AND NOT(WIN32 OR ENABLE_ALSA OR ENABLE_ARTSC OR ENABLE_MACSND OR ENABLE_MACAQSND OR ENABLE_OSS OR ENABLE_PORTAUDIO OR ENABLE_PULSEAUDIO OR ENABLE_QSA OR ENABLE_ANDROIDSND))
	message(FATAL_ERROR "Could not find a support sound driver API. Use -DENABLE_SOUND=NO if you don't care about having sound.")
endif()

if(ENABLE_G729 OR ENABLE_G729B_CNG)
	if(LINPHONE_BUILDER_GROUP_EXTERNAL_SOURCE_PATH_BUILDERS)
		include("${EP_bcg729_CONFIG_DIR}/Bcg729Config.cmake")
	else()
		find_package(Bcg729 1.0.1)
	endif()
	if(NOT BCG729_FOUND)
		message(WARNING "Could not find bcg729, mediastreamer2 will be compiled without G729 codec and G729 AnnexB in RFC3389.")
		set(ENABLE_G729 OFF CACHE BOOL "Build mediastreamer2 with the G729 codec." FORCE)
		set(ENABLE_G729_CNG OFF CACHE BOOL "Build mediastreamer2 with G729 Annex B cng." FORCE)
	endif()
endif()

if(ENABLE_JPEG)
	find_package(TurboJpeg)
	if(NOT TURBOJPEG_FOUND)
		message(WARNING "Could not find libturbo-jpeg, mediastreamer2 will be compiled without LibJpeg-Turbo")
		set(ENABLE_JPEG OFF CACHE BOOL "Enable JPEG support" FORCE)
	endif()
endif()
if(ENABLE_QRCODE)
	find_package(Zxing)
	if(NOT ZXING_FOUND)
		message(WARNING "Could not find Zxing, mediastreamer2 will be compiled without Zxing(QRCode)")
		set(ENABLE_QRCODE OFF CACHE BOOL "Enable QRCode support" FORCE)
	else()
		add_definitions(-DQRCODE_ENABLED)
	endif()
endif()

if(LINPHONE_BUILDER_GROUP_EXTERNAL_SOURCE_PATH_BUILDERS)
	set(BcToolbox_FIND_COMPONENTS tester)
	include("${EP_bctoolbox_CONFIG_DIR}/BcToolboxConfig.cmake")
else()
	find_package(BcToolbox 0.0.3 REQUIRED OPTIONAL_COMPONENTS tester)
endif()

include_directories(
	include
	src/audiofilters
	src/utils
	src/voip
	${CMAKE_CURRENT_BINARY_DIR}
	${CMAKE_CURRENT_BINARY_DIR}/src
)

set(MEDIASTREAMER2_INCLUDE_DIRS
	${ORTP_INCLUDE_DIRS}
	${BCTOOLBOX_CORE_INCLUDE_DIRS}
)
if(BZRTP_FOUND)
	list(APPEND MEDIASTREAMER2_INCLUDE_DIRS ${BZRTP_INCLUDE_DIRS})
endif()
if(SRTP_FOUND)
	list(APPEND MEDIASTREAMER2_INCLUDE_DIRS ${SRTP_INCLUDE_DIRS})
endif()
if(SPANDSP_FOUND)
	list(APPEND MEDIASTREAMER2_INCLUDE_DIRS ${SPANDSP_INCLUDE_DIRS})
endif()
if(GSM_FOUND)
	list(APPEND MEDIASTREAMER2_INCLUDE_DIRS ${GSM_INCLUDE_DIRS})
endif()
if(OPUS_FOUND)
	list(APPEND MEDIASTREAMER2_INCLUDE_DIRS ${OPUS_INCLUDE_DIRS})
endif()
if(SPEEX_FOUND)
	list(APPEND MEDIASTREAMER2_INCLUDE_DIRS ${SPEEX_INCLUDE_DIRS})
endif()
if(SPEEXDSP_FOUND)
	list(APPEND MEDIASTREAMER2_INCLUDE_DIRS ${SPEEXDSP_INCLUDE_DIRS})
endif()
if(FFMPEG_FOUND)
	list(APPEND MEDIASTREAMER2_INCLUDE_DIRS ${FFMPEG_INCLUDE_DIRS})
endif()
if(VPX_FOUND)
	list(APPEND MEDIASTREAMER2_INCLUDE_DIRS ${VPX_INCLUDE_DIRS})
endif()
if(BCMATROSKA2_FOUND)
	list(APPEND MEDIASTREAMER2_INCLUDE_DIRS ${BCMATROSKA2_INCLUDE_DIRS})
endif()
if(V4L_FOUND)
	list(APPEND MEDIASTREAMER2_INCLUDE_DIRS ${V4L_INCLUDE_DIRS})
endif()
if(ALSA_FOUND)
	list(APPEND MEDIASTREAMER2_INCLUDE_DIRS ${ALSA_INCLUDE_DIRS})
endif()
if(ARTS_FOUND)
	list(APPEND MEDIASTREAMER2_INCLUDE_DIRS ${ARTS_INCLUDE_DIRS})
endif()
if(PORTAUDIO_FOUND)
	list(APPEND MEDIASTREAMER2_INCLUDE_DIRS ${PORTAUDIO_INCLUDE_DIRS})
endif()
if(PULSEAUDIO_FOUND)
	list(APPEND MEDIASTREAMER2_INCLUDE_DIRS ${PULSEAUDIO_INCLUDE_DIRS})
endif()
if(QSA_FOUND)
	list(APPEND MEDIASTREAMER2_INCLUDE_DIRS ${QSA_INCLUDE_DIRS})
endif()
if(QNXAUDIOMANAGER_FOUND)
	list(APPEND MEDIASTREAMER2_INCLUDE_DIRS ${QNXAUDIOMANAGER_INCLUDE_DIRS})
endif()
if(X11_FOUND)
	list(APPEND MEDIASTREAMER2_INCLUDE_DIRS ${X11_INCLUDE_DIRS})
endif()
if(XV_FOUND)
	list(APPEND MEDIASTREAMER2_INCLUDE_DIRS ${XV_INCLUDE_DIRS})
endif()
if(QTANGLE_FOUND)
	list(APPEND MEDIASTREAMER2_INCLUDE_DIRS ${QTANGLE_INCLUDE_DIRS})
endif()
if(OPENGL_FOUND)
	list(APPEND MEDIASTREAMER2_INCLUDE_DIRS ${OPENGL_INCLUDE_DIR})
endif()
if(GLX_FOUND)
	list(APPEND MEDIASTREAMER2_INCLUDE_DIRS ${GLX_INCLUDE_DIRS})
endif()
if(SCREEN_FOUND)
	list(APPEND MEDIASTREAMER2_INCLUDE_DIRS ${SCREEN_INCLUDE_DIRS})
endif()
if(CAMAPI_FOUND)
	list(APPEND MEDIASTREAMER2_INCLUDE_DIRS ${CAMAPI_INCLUDE_DIRS})
endif()
if(PCAP_FOUND)
	list(APPEND MEDIASTREAMER2_INCLUDE_DIRS ${PCAP_INCLUDE_DIRS})
endif()
if(MSVC_INCLUDE_DIR)
	list(APPEND MEDIASTREAMER2_INCLUDE_DIRS ${MSVC_INCLUDE_DIR})
endif()
if(TURBOJPEG_FOUND)
	list(APPEND MEDIASTREAMER2_INCLUDE_DIRS ${TURBOJPEG_INCLUDE_DIRS})
endif()
if(ZXING_FOUND)
	list(APPEND MEDIASTREAMER2_INCLUDE_DIRS ${ZXING_INCLUDE_DIRS})
endif()
if(ENABLE_ANDROIDSND)
	include_directories(
		src/android
		src/android/media
	)
endif()
if(BCG729_FOUND)
	list(APPEND MEDIASTREAMER2_INCLUDE_DIRS ${BCG729_INCLUDE_DIRS})
endif()
if(ENABLE_DEBUG_LOGS)
	add_definitions(-DDEBUG)
endif()
if(ENABLE_FIXED_POINT)
	set(MS_FIXED_POINT 1)
endif()
if(ENABLE_NON_FREE_CODECS)
	set(HAVE_NON_FREE_CODECS 1)
else()
	set(HAVE_NON_FREE_CODECS 0)
endif()
if(PCAP_FOUND)
	set(HAVE_PCAP 1)
endif()
if(SRTP_FOUND)
	set(HAVE_SRTP 1)
endif()
if(BZRTP_FOUND)
	set(HAVE_ZRTP 1)
endif()
if(ENABLE_ALSA)
	set(__ALSA_ENABLED__ 1)
endif()
if(ENABLE_ARTSC)
	set(__ARTS_ENABLED__ 1)
endif()
if(ENABLE_MACSND)
	set(__MACSND_ENABLED__ 1)
endif()
if(ENABLE_MACAQSND)
	set(__MAC_AQ_ENABLED__ 1)
endif()
if(ENABLE_PORTAUDIO)
	set(__PORTAUDIO_ENABLED__ 1)
endif()
if(ENABLE_PULSEAUDIO)
	set(__PULSEAUDIO_ENABLED__ 1)
endif()
if(ENABLE_QSA)
	set(__QSA_ENABLED__ 1)
endif()
if(ENABLE_QNX)
	set(__QNX__ 1)
endif()
if(SPEEXDSP_FOUND)
	set(HAVE_SPEEXDSP 1)
endif()
if(BCMATROSKA2_FOUND)
	set(HAVE_MATROSKA 1)
endif()
if(TURBO_JPEG_FOUND)
	set(HAVE_TURBO_JPEG 1)
endif()
if(ENABLE_RELATIVE_PREFIX)
	if(CMAKE_SYSTEM_NAME STREQUAL "WindowsPhone" OR CMAKE_SYSTEM_NAME STREQUAL "WindowsStore")
		set(PACKAGE_PLUGINS_DIR ".")
		set(PACKAGE_DATA_DIR ".")
	else()
		set(PACKAGE_PLUGINS_DIR "./${CMAKE_INSTALL_LIBDIR}/mediastreamer/plugins")
		set(PACKAGE_DATA_DIR "./${CMAKE_INSTALL_DATADIR}")
	endif()
else()
	set(PACKAGE_PLUGINS_DIR "${CMAKE_INSTALL_PREFIX}/${CMAKE_INSTALL_LIBDIR}/mediastreamer/plugins")
	set(PACKAGE_DATA_DIR "${CMAKE_INSTALL_PREFIX}/${CMAKE_INSTALL_DATADIR}")
endif()
set(LINK_FLAGS )
if(APPLE)
	list(APPEND LINK_FLAGS "-framework CoreFoundation" "-framework AudioToolbox" "-framework CoreAudio")
	if(IOS) # Necessary for Mediastreamer's tools and testers
		list(APPEND LINK_FLAGS "-framework Foundation" "-framework QuartzCore" "-framework OpenGLES" "-framework UIKit" "-framework AVFoundation")
		if(ENABLE_VIDEO)
			list(APPEND LINK_FLAGS "-framework CoreGraphics" "-framework CoreMedia" "-framework CoreVideo")
			if(ENABLE_VT_H264 OR ENABLE_VT_H265) # Necessary on iOS for Mediastreamer's tools and testers
				list(APPEND LINK_FLAGS "-framework VideoToolbox")
			endif()
		endif()
	else()
		list(APPEND LINK_FLAGS "-framework AppKit")
		if(ENABLE_MACSND)
			list(APPEND LINK_FLAGS "-framework Carbon" "-framework AudioUnit")
		endif()
		if(ENABLE_VIDEO)
			list(APPEND LINK_FLAGS "-framework Cocoa" "-framework OpenGL" "-framework QuartzCore" "-framework AVFoundation")
			if(ENABLE_VT_H264 OR ENABLE_VT_H265)
				list(APPEND LINK_FLAGS "-framework VideoToolbox -framework CoreMedia")
			endif()
		endif()
		add_definitions("-DTARGET_OS_MAC=1")
	endif()
endif()
string(REPLACE ";" " " LINK_FLAGS_STR "${LINK_FLAGS}")
configure_file(${CMAKE_CURRENT_SOURCE_DIR}/mediastreamer-config.h.cmake ${CMAKE_CURRENT_BINARY_DIR}/mediastreamer-config.h)
set_source_files_properties(${CMAKE_CURRENT_BINARY_DIR}/mediastreamer-config.h PROPERTIES GENERATED ON)
add_definitions("-DHAVE_CONFIG_H")

set(MEDIASTREAMER2_CPPFLAGS ${ORTP_CPPFLAGS} ${BZRTP_CPPFLAGS} ${BCTOOLBOX_CPPFLAGS} ${BCG729_CPPFLAGS})
if(ENABLE_STATIC)
	list(APPEND MEDIASTREAMER2_CPPFLAGS "-DMS2_STATIC")
endif()
if(MEDIASTREAMER2_CPPFLAGS)
	list(REMOVE_DUPLICATES MEDIASTREAMER2_CPPFLAGS)
	add_definitions(${MEDIASTREAMER2_CPPFLAGS})
endif()

set(STRICT_OPTIONS_CPP )
set(STRICT_OPTIONS_C )
set(STRICT_OPTIONS_OBJC "-Wno-error")
if(MSVC)
	list(APPEND STRICT_OPTIONS_CPP "/wd4142") # Disable "benign redefinition of type" warnings.
	list(APPEND STRICT_OPTIONS_CPP "/wd4996") # Disable POSIX functions warnings from bctbx.
	if(ENABLE_STRICT)
		list(APPEND STRICT_OPTIONS_CPP "/WX")
	endif()
else()
	list(APPEND STRICT_OPTIONS_CPP "-Wall" "-Wuninitialized")
	list(APPEND STRICT_OPTIONS_C "-Wdeclaration-after-statement" "-Wstrict-prototypes" "-Wno-error=strict-prototypes")
	if(CMAKE_CXX_COMPILER_ID MATCHES "Clang")
		list(APPEND STRICT_OPTIONS_CXX "-x c++")
	endif()
	if(CMAKE_C_COMPILER_ID MATCHES "Clang")
		list(APPEND STRICT_OPTIONS_CPP "-Qunused-arguments" "-Wno-unused-function" "-Wno-array-bounds")
	elseif(CMAKE_C_COMPILER_ID STREQUAL "GNU")
		if(${CMAKE_C_COMPILER_VERSION} VERSION_GREATER "7")
		    list(APPEND STRICT_OPTIONS_CPP "-Wno-format-truncation")
		endif()
		if(${CMAKE_C_COMPILER_VERSION} VERSION_GREATER "8")
			list(APPEND STRICT_OPTIONS_CPP "-Wno-error=stringop-truncation")
		endif()
	endif()
	if(APPLE)
		list(APPEND STRICT_OPTIONS_CPP "-Wno-error=unknown-warning-option" "-Qunused-arguments" "-Wno-tautological-compare" "-Wno-unused-function" "-Wno-array-bounds")
	endif()
	if(ENABLE_STRICT)
		list(APPEND STRICT_OPTIONS_CPP "-Werror" "-Wextra" "-Wno-unused-parameter" "-fno-strict-aliasing" "-Wno-missing-field-initializers" "-Wno-error=deprecated-declarations")
	endif()
endif()
if(STRICT_OPTIONS_CPP)
	list(REMOVE_DUPLICATES STRICT_OPTIONS_CPP)
endif()
if(STRICT_OPTIONS_C)
	list(REMOVE_DUPLICATES STRICT_OPTIONS_C)
endif()
if(STRICT_OPTIONS_OBJC)
	list(REMOVE_DUPLICATES STRICT_OPTIONS_OBJC)
endif()


if(LINPHONE_BUILDER_GROUP_EXTERNAL_SOURCE_PATH_BUILDERS)
	set(EXPORT_TARGETS_NAME "LinphoneBuilder")
else()
	set(EXPORT_TARGETS_NAME "Mediastreamer2")
endif()


if(ENABLE_DOC)
	add_subdirectory(help)
endif()
add_subdirectory(include)
add_subdirectory(src)
if(ENABLE_UNIT_TESTS AND BCTOOLBOX_TESTER_FOUND)
	add_subdirectory(tester)
endif()
if(ENABLE_TOOLS)
	add_subdirectory(tools)
endif()


include(CMakePackageConfigHelpers)
write_basic_package_version_file(
	"${CMAKE_CURRENT_BINARY_DIR}/Mediastreamer2ConfigVersion.cmake"
	VERSION ${MEDIASTREAMER_VERSION}
	COMPATIBILITY AnyNewerVersion
)
export(EXPORT ${EXPORT_TARGETS_NAME}Targets
	FILE "${CMAKE_CURRENT_BINARY_DIR}/Mediastreamer2Targets.cmake"
)
configure_file(cmake/Mediastreamer2Config.cmake.in
	"${CMAKE_CURRENT_BINARY_DIR}/Mediastreamer2Config.cmake"
	@ONLY
)

set(CONFIG_PACKAGE_LOCATION "${CMAKE_INSTALL_DATADIR}/Mediastreamer2/cmake")
install(EXPORT ${EXPORT_TARGETS_NAME}Targets
	FILE Mediastreamer2Targets.cmake
	DESTINATION ${CONFIG_PACKAGE_LOCATION}
)
install(FILES
	"${CMAKE_CURRENT_BINARY_DIR}/Mediastreamer2Config.cmake"
	"${CMAKE_CURRENT_BINARY_DIR}/Mediastreamer2ConfigVersion.cmake"
	DESTINATION ${CONFIG_PACKAGE_LOCATION}
)

add_subdirectory(build)
